{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u041d\u0443 \u0447\u0451 \u0442\u0443\u0442","title":"Home"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"\u041d\u0443 \u0447\u0451 \u0442\u0443\u0442","title":"Project layout"},{"location":"labs/lab1/","text":"\u0421\u043e\u043a\u0435\u0442\u044b \u0421\u043e\u043a\u0435\u0442 - \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044f \u041e\u0421, \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430\u043c \u043e\u0431\u043c\u0435\u043d\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439. \u0420\u0430\u0437\u043b\u0438\u0447\u0430\u044e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u044b\u0435 \u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u044b. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u044b\u0439 \u0441\u043e\u043a\u0435\u0442 : \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0430\u0434\u0440\u0435\u0441 \u0438 \u043f\u043e\u0440\u0442 \u0441\u043e\u043a\u0435\u0442\u0430 ( bind() ) \u0421\u043b\u0443\u0448\u0430\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f ( listen() ) \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 ( accept() ) \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0438 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 ( send , recv ) \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u0441\u043e\u043a\u0435\u0442 : \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u043c\u0443 \u0441\u043e\u043a\u0435\u0442\u0443 ( connect() ) \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0438 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 ( send , recv ) \u0421\u043e\u043a\u0435\u0442\u044b \u043c\u043e\u0433\u0443\u0442 \u0435\u0449\u0451 \u0438\u043c\u0435\u0442\u044c \u0440\u0430\u0437\u043d\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e : \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c IPv4 \u0438\u043b\u0438 IPv6, \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043f\u043e\u0432\u0435\u0440\u0445 TCP \u0438\u043b\u0438 UDP, \u0438\u043c\u0435\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0439 \u0442\u0438\u043f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 - \u043f\u043e\u0442\u043e\u043a\u043e\u0432\u044b\u044b\u0439 \u0438\u043b\u0438 \u0434\u0430\u0442\u0430\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439. \u0427\u0443\u0442\u044c \u043f\u0440\u043e UDP vs TCP UDP \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b UDP \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0431\u044b\u0441\u0442\u0440\u043e, \u043d\u043e \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0435 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f. \u0414\u043b\u044f UDP \u043d\u0435 \u043d\u0430\u0434\u043e \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f, \u043c\u043e\u0436\u043d\u043e \u0441\u0440\u0430\u0437\u0443 \u043d\u0430\u0447\u0438\u043d\u0430\u0442\u044c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043f\u0430\u043a\u0435\u0442\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0414\u0430\u043d\u043d\u044b\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0434\u0430\u0442\u0430\u0433\u0440\u0430\u043c\u043c\u0430\u043c\u0438 (\u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u0440\u043e\u0431\u044f\u0442\u0441\u044f \u043d\u0430 \u0431\u043e\u043b\u0435\u0435 \u043c\u0435\u043b\u043a\u0438\u0435 \u043f\u0430\u043a\u0435\u0442\u044b) \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0441\u043f\u043b\u043e\u0448\u043d\u044b\u043c \u043f\u043e\u0442\u043e\u043a\u043e\u043c, \u043d\u0435 \u043e\u0436\u0438\u0434\u0430\u044f \u0444\u0438\u0434\u0431\u0435\u043a\u0430 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0441\u0442\u0440\u0438\u043c\u043c\u0438\u043d\u0433\u0430 \u0432\u0438\u0434\u0435\u043e \u0438 \u0430\u0443\u0434\u0438\u043e, VoIP, \u043e\u043d\u043b\u0430\u0439\u043d-\u0438\u0433\u0440 TCP \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b TCP \u0431\u043e\u043b\u0435\u0435 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b\u0439 \u0438 \u043d\u0430\u0434\u0451\u0436\u043d\u044b\u0439 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b \u043f\u043e\u0442\u043e\u043a\u043e\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0434\u0430\u043d\u043d\u044b\u0445, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d: \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0432\u0441\u0435 \u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043e\u0441\u0442\u0430\u0432\u0438\u043b\u0438\u0441\u044c \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u041f\u043e \u0444\u0430\u043a\u0442\u0443 \u043d\u0430 payload \u043d\u0430\u0432\u0435\u0448\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0441\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0435 \u043f\u0430\u043a\u0435\u0442\u044b - IP headers \u0438 TCP headers, \u044d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0434\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435. \u0427\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446, \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0444\u0430\u0439\u043b\u043e\u0432 \u0438 \u043f\u0440\u043e\u0447\u0435\u0435 NB: \u041f\u043e\u0447\u0442\u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u0434 \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430 ( server.py ) \u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 ( client.py ) NB: \u0412\u0430\u0436\u043d\u043e \u043e\u0442\u043c\u0435\u0442\u0438\u0442\u044c \u0435\u0449\u0451 \u0442\u043e, \u0447\u0442\u043e \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \u0441\u043e\u043a\u0435\u0442, \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0432 \u0431\u0430\u0439\u0442\u044b (\u043c\u0435\u0442\u043e\u0434 .encode() ), \u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f - \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u044b (\u043c\u0435\u0442\u043e\u0434 .decode() ) \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 - \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 UDP \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u043e\u043c \u041d\u0438\u0447\u0435\u0433\u043e \u0441\u043b\u043e\u0436\u043d\u043e\u0433\u043e, \u043f\u0438\u0448\u0435\u043c \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0441 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0435\u043c \u0441\u043e\u043a\u0435\u0442\u0430 \u0441 type = socket.SOCK_DGRAM (UDP \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b). \u0414\u0430\u043b\u044c\u0448\u0435 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u043a\u0435\u0442 \u043d\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0445\u043e\u0441\u0442\u0435 \u0438 \u043f\u043e\u0440\u0442\u0443 ( bind() ), \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u0434\u043b\u044f server.py : import socket def run_server ( host : str = '127.0.0.1' , port : int = 8080 ) -> None : ''' \u0417\u0430\u043f\u0443\u0441\u043a UDP-\u0441\u0435\u0440\u0432\u0435\u0440\u0430 ''' with socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) as server : server . bind (( host , port )) print ( f 'Server started at { host } : { port } ' ) data , client_addr = server . recvfrom ( 1024 ) print ( f 'Recieved message from client: { data . decode () } ' ) msg = 'Hello, client' server . sendto ( msg . encode (), client_addr ) print ( f 'Sended message to client { client_addr [ 0 ] } : { client_addr [ 1 ] } : { msg } ' ) if __name__ == '__main__' : run_server () \u0414\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0442\u043e\u0436\u0435 \u043f\u0438\u0448\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u0441\u044f \u043a \u0445\u043e\u0441\u0442\u0443 \u0438 \u043f\u043e\u0440\u0442\u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u0434\u043b\u044f client.py : import socket def run_client ( server_host : str = '127.0.0.1' , server_port : int = 8080 ): ''' \u0417\u0430\u043f\u0443\u0441\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0441 UDP-\u0441\u0435\u0440\u0432\u0435\u0440\u0443 ''' with socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) as client : msg = 'Hello, server' client . sendto ( msg . encode (), ( server_host , server_port )) print ( f 'Message send to server { server_host } : { server_port } : { msg } ' ) data , _ = client . recvfrom ( 1024 ) print ( f 'Recieced response from server: { data . decode () } ' ) if __name__ == '__main__' : run_client () \u041f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u0432 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u043f\u043e\u0442\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0443\u0432\u0438\u0434\u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \"Hello, server\", \u043f\u043e\u0442\u043e\u043c \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u0432\u0435\u0442\u0438\u0442 \u043d\u0430 \u044d\u0442\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\u043c \"Hello, client\". \u041d\u0443 \u0438 \u0437\u0430\u043e\u0434\u043d\u043e \u0431\u0443\u0434\u0443\u0442 \u0432\u0438\u0434\u043d\u044b \u043b\u043e\u0433\u0438 \u043a\u0442\u043e \u0447\u0442\u043e \u043a\u043e\u043c\u0443 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u043b. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 - \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 TCP \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u043e\u043c \u0412\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043b\u043e\u0441\u044c \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u043e\u043a\u0435\u0442 \u043d\u0430 TCP, \u0433\u0434\u0435 \u0441\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u043a\u0430\u043a\u0443\u044e-\u043b\u0438\u0431\u043e \u0438\u043d\u0444\u0443 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0435\u0451, \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u043e\u0442\u0432\u0435\u0442 \u0423 \u043c\u0435\u043d\u044f 1 \u0432\u0430\u0440\u0438\u0430\u043d\u0442, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0442\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430. \u041d\u0438\u0447\u0435\u0433\u043e \u0441\u043b\u043e\u0436\u043d\u043e\u0433\u043e, \u043d\u043e \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b \u0440\u0430\u0437\u043d\u044b\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u0435\u043e\u0440\u0435\u043c\u044b \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 - \u043f\u043e \u043a\u0430\u0442\u0435\u0442\u0430\u043c \u043d\u0430\u0439\u0442\u0438 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0443, \u043f\u043e \u043a\u0430\u0442\u0435\u0442\u0443 \u0438 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0435 \u043d\u0430\u0439\u0442\u0438 \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0439\u0441\u044f \u043a\u0430\u0442\u0435\u0442 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 (\u0438\u043b\u0438 \u043d\u0435\u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435) \u0442\u0435\u043e\u0440\u0435\u043c\u044b \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430, \u0435\u0441\u043b\u0438 \u0434\u0430\u043d\u044b \u0432\u0441\u0435 3 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435. \u042f \u043d\u0430\u043f\u0438\u0441\u0430\u043b\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u044d\u0442\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438: from math import sqrt from typing import Tuple def calculate_pythagorean ( a : float | None = None , b : float | None = None , c : float | None = None ) -> Tuple [ float , float ] | bool : ''' \u041f\u043e\u0434\u0441\u0447\u0451\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043a\u0430\u0442\u0435\u0442\u043e\u0432/\u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u044b \u043f\u043e \u0442\u0435\u043e\u0440\u0435\u043c\u0435 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 \u0441 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 (\u043c\u0438\u043d\u0438\u043c\u0443\u043c 2 \u043d\u0435 None) ''' count_arguments = sum ( x is None for x in ( a , b , c )) if count_arguments >= 2 : raise ValueError ( '\u0414\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043e \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c 2 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430' ) # 3 \u0441\u043b\u0443\u0447\u0430\u044f \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c if ( a is not None ) and ( b is not None ) and ( c is None ): # \u0434\u0430\u043d\u044b \u0442\u043e\u043b\u044c\u043a\u043e a \u0438 b c = sqrt ( a ** 2 + b ** 2 ) c_squared = c ** 2 return (( c_squared , c )) elif (( a is not None ) and ( b is None ) and ( c is not None )) or \\ (( a is None ) and ( b is not None ) and ( c is not None )): # \u0434\u0430\u043d\u044b \u0442\u043e\u043b\u044c\u043a\u043e a \u0438 c if b is None : b = a a = round ( sqrt ( c ** 2 - b ** 2 ), 2 ) a_squared = round ( a ** 2 , 2 ) return (( a_squared , a )) else : # \u0434\u0430\u043d\u044b a, b \u0438 c return True if (( a ** 2 + b ** 2 ) == ( c ** 2 )) else False \u0414\u0430\u043b\u0435\u0435 \u0438\u0434\u0451\u0442 \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c. \u0421\u0435\u0440\u0432\u0435\u0440 \u0443\u0436\u0435 \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u043a\u0435\u0442 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c \u0442\u0438\u043f\u043e\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f type = socket.SOCK_STREAM , \u0447\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 TCP \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b \u0438 \u043f\u0440\u043e\u0434\u0435\u043b\u044b\u0432\u0430\u0435\u0442 \u0446\u0435\u043f\u043e\u0447\u043a\u0443 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439: bind() -> listen() -> accept() . \u041f\u043e\u0441\u043b\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0441\u0435\u0440\u0432\u0435\u0440 \u0436\u0434\u0451\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0442 \u043d\u0435\u0433\u043e (\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u0432\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e \u0432\u0432\u043e\u0434\u0438\u0442 \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b), \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0440\u0435\u0430\u043b\u044c\u043d\u043e \u0435\u0441\u0442\u044c, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u0445 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044e calculate_pythagorean , \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u0437 \u043d\u0435\u0451 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 server.py : import socket def run_server ( server_host : str = '127.0.0.1' , server_port : int = 8080 ): '''\u0417\u0430\u043f\u0443\u0441\u043a TCP-\u0441\u0435\u0440\u0432\u0435\u0440\u0430''' with socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) as server : server . bind (( server_host , server_port )) server . listen ( 1 ) print ( f '\u0421\u0435\u0440\u0432\u0435\u0440 \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u043d\u0430 { server_host } : { server_port } ' ) conn , addr = server . accept () with conn : print ( f '\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c { addr } ' ) data = conn . recv ( 1024 ) if data : params = data . decode () . split ( ',' ) a , b , c = [ int ( x ) if x else None for x in params ] try : result = calculate_pythagorean ( a , b , c ) except Exception as e : conn . sendall ( f '\u041e\u0448\u0438\u0431\u043a\u0430: { e } ' . encode ()) else : conn . sendall ( str ( result ) . encode ()) if __name__ == '__main__' : run_server () \u041a\u043b\u0438\u0435\u043d\u0442 \u0436\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0445\u043e\u0441\u0442\u043e\u043c \u0438 \u043f\u043e\u0440\u0442\u043e\u043c, \u0436\u0434\u0451\u0442 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432\u0432\u043e\u0434\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 client.py : import socket def run_client ( server_host : str = '127.0.0.1' , server_port : int = 8080 ): ''' \u0417\u0430\u043f\u0443\u0441\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a TCP \u0441\u0435\u0440\u0432\u0435\u0440\u0443 ''' with socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) as client : client . connect (( server_host , server_port )) a = input ( '\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0442\u0430 a (\u0438\u043b\u0438 \u043f\u0443\u0441\u0442\u043e): ' ) b = input ( '\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0442\u0430 b (\u0438\u043b\u0438 \u043f\u0443\u0441\u0442\u043e): ' ) c = input ( '\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u044b c (\u0438\u043b\u0438 \u043f\u0443\u0441\u0442\u043e): ' ) params = ',' . join ([ a , b , c ]) client . sendall ( params . encode ()) data = client . recv ( 1024 ) print ( f '\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: { data . decode () } ' ) if __name__ == '__main__' : run_client () \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 - HTTP-\u0441\u0435\u0440\u0432\u0435\u0440 \u0412 \u0442\u0440\u0435\u0442\u044c\u0435\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043b\u043e\u0441\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 HTTP-\u0441\u0435\u0440\u0432\u0435\u0440 \u043d\u0430 \u0441\u043e\u043a\u0435\u0442\u0430\u0445. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441, \u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0435 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\u043c\u0438 \u0438 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435\u0439. \u0421\u0435\u0440\u0432\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043f\u043e\u0432\u0435\u0440\u0445 TCP ( socket.SOCK_STREAM ), \u0442\u0430\u043a \u043a\u0430\u043a HTTP-\u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b \u043e\u0441\u043d\u043e\u0432\u0430\u043d \u0438\u043c\u0435\u043d\u043d\u043e \u043d\u0430 \u043d\u0451\u043c \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u043f\u044f\u0442\u044c \u0438\u0434\u0451\u0442 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c bind() -> listen() -> accept() . \u041f\u043e\u0442\u043e\u043c \u0441\u0435\u0440\u0432\u0435\u0440 \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0447\u0435\u0440\u0435\u0437 recv() , \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043a\u0443 \u0438\u0437 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 index.html , \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 HTTP-\u043e\u0442\u0432\u0435\u0442 (\u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430, \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 (Content-Type, Content-Length \u0438 \u0434\u0440.), \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c \\r\\n\\r\\n \u0438 \u0442\u0435\u043b\u043e \u043e\u0442\u0432\u0435\u0442\u0430) \u0438 \u043e\u0442\u0434\u0430\u0451\u0442 HTTP-\u043e\u0442\u0432\u0435\u0442 200 OK (\u0435\u0441\u043b\u0438 \u0440\u0435\u0430\u043b\u044c\u043d\u043e \u0432\u0441\u0451 \u043e\u043a, \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e \u0438 \u0444\u0430\u0439\u043b \u043d\u0430\u0439\u0434\u0435\u043d). \u0415\u0441\u043b\u0438 \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430, \u0442\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0430 404 Not Found \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 server.py : import socket def run_server ( server_host : str = 'localhost' , server_port : int = 8080 ): ''' \u041f\u0440\u043e\u0441\u0442\u043e\u0439 TCP-\u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0443 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 ''' with socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) as server : server . bind (( server_host , server_port )) server . listen ( 1 ) print ( f '\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 { server_host } : { server_port } ' ) conn , addr = server . accept () with conn : print ( f '\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0451\u043d \u043a\u043b\u0438\u0435\u043d\u0442 { addr } ' ) # \u0447\u0438\u0442\u0430\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 data = conn . recv ( 1024 ) print ( f '\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u044b \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: { data } ' ) # \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 HTML \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b try : with open ( './index.html' , encoding = 'utf-8' ) as html_page : html_data = html_page . read () html_bytes = html_data . encode ( 'utf-8' ) content_length = len ( html_bytes ) # \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c HTTP-\u043e\u0442\u0432\u0435\u0442 \u0441 HTML-\u043a\u043e\u043d\u0442\u0435\u043d\u0442\u043e\u043c http_response = ( \"HTTP/1.1 200 OK \\r\\n \" \"Content-Type: text/html; charset=UTF-8 \\r\\n \" f \"Content-Length: { content_length } \\r\\n \" \"Connection: close \\r\\n \" \" \\r\\n \" ) # \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0443 HTML \u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043a\u0443 conn . sendall ( http_response . encode () + html_bytes ) except FileNotFoundError : error_message = \"<html><body><h1>404 Not Found</h1><p>\u0424\u0430\u0439\u043b \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d</p></body></html>\" error_bytes = error_message . encode ( 'utf-8' ) content_length = len ( error_bytes ) http_response = ( \"HTTP/1.1 404 Not Found \\r\\n \" \"Content-Type: text/html; charset=UTF-8 \\r\\n \" f \"Content-Length: { content_length } \\r\\n \" \"Connection: close \\r\\n \" \" \\r\\n \" ) conn . sendall ( http_response . encode ( 'utf-8' ) + error_bytes ) if __name__ == \"__main__\" : run_server () HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 ( index.html ), \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u0434\u0430\u0451\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443: <!DOCTYPE html> < html > < head > < title > \u0421\u043e\u043a\u0435\u0442 \u043d\u0430 Python </ title > </ head > < body > < h1 > \u0418\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e, \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e </ h1 > < p > \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0447\u0442\u043e \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u0432\u044b\u0439\u0434\u0435\u0442 </ p > </ body > </ html > \u041f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 \u0430\u0434\u0440\u0435\u0441\u0430 http://localhost:8080/ \u043a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 GET-\u0437\u0430\u043f\u0440\u043e\u0441, \u0441\u0435\u0440\u0432\u0435\u0440 \u0435\u0433\u043e \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 HTML-\u043a\u043e\u043d\u0442\u0435\u043d\u0442 \u041f\u0440\u0438\u043c\u0435\u0440 GET-\u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043e\u0442 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0430: GET / HTTP/1.1\\r\\nHost: localhost:8080\\r\\nConnection: keep-alive\\r\\nsec-ch-ua: \"Chromium\";v=\"140\", \"Not=A?Brand\";v=\"24\", \"Google Chrome\";v=\"140\"\\r\\nsec-ch-ua-mobile: ?0\\r\\nsec-ch-ua-platform: \"macOS\"\\r\\nUpgrade-Insecure-Requests: 1\\r\\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36\\r\\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\\r\\nSec-Fetch-Site: none\\r\\nSec-Fetch-Mode: navigate\\r\\nSec-Fetch-User: ?1\\r\\nSec-Fetch-Dest: document\\r\\nAccept-Encoding: gzip, deflate, br, zstd\\r\\nAccept-Language: en-GB,en-US;q=0.9,en;q=0.8,ru;q=0 7\\r\\n\\r\\n \u0412 \u0438\u0442\u043e\u0433\u0435 \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u043c \u0438 \u0442\u0435\u043a\u0441\u0442\u043e\u043c \u0438\u0437 index.html . \u0415\u0441\u043b\u0438 \u0444\u0430\u0439\u043b \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442, \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u0432\u043c\u0435\u0441\u0442\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e 404 Not Found \u0417\u0430\u0434\u0430\u043d\u0438\u0435 4 - \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u0441 \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438 \u042f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043b\u0430 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u043d\u0430 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0435 TCP \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 threading \u0421\u0435\u0440\u0432\u0435\u0440 \u0445\u0440\u0430\u043d\u0438\u0442 \u0432\u0441\u0435\u0445 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0451\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u043e\u0431\u0449\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u0435, \u0433\u0434\u0435 \u043a\u043b\u044e\u0447\u043e\u043c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u043e\u043a\u0435\u0442, \u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u2014 \u043d\u0438\u043a\u043d\u0435\u0439\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0414\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c\u044b\u043c \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u043c (\u0441\u043f\u0438\u0441\u043a\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432) \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0430 ( threading.Lock ), \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c race condition. \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439: \u0441\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u0438 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442 \u0441\u043b\u0443\u0448\u0430\u0442\u044c \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u043d\u043e\u0432\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u043e\u0442\u043e\u043a, \u0433\u0434\u0435 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f (\u043d\u0438\u043a\u043d\u0435\u0439\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u0435\u0440\u0432\u044b\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\u043c), \u0437\u0430\u0442\u0435\u043c \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u0446\u0438\u043a\u043b \u043f\u0440\u0438\u0451\u043c\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439. \u041a\u0430\u0436\u0434\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u0440\u0430\u0441\u0441\u044b\u043b\u0430\u0435\u0442 \u0432\u0441\u0435\u043c \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e broadcast . \u0415\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0438\u043b\u0438 \u0435\u0433\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u043e\u0431\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f, \u0441\u0435\u0440\u0432\u0435\u0440 \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0435\u0433\u043e \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u044f\u0435\u0442 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u043e \u0432\u044b\u0445\u043e\u0434\u0435 \u0438\u0437 \u0447\u0430\u0442\u0430 \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 server.py : import socket import threading from typing import Tuple , Dict # \u043a\u043b\u0438\u0435\u043d\u0442 == \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c # \u0425\u0440\u0430\u043d\u0438\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0451\u043d\u043d\u044b\u0435 \u0441\u043e\u043a\u0435\u0442\u044b (\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439) clients : Dict [ socket . socket , str ] = {} # \u0441\u043e\u043a\u0435\u0442: \u043d\u0438\u043a\u043d\u0435\u0439\u043c # \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0430, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0431\u044b\u043b\u043e race condition clients_lock = threading . Lock () def broadcast ( message : str ) -> None : ''' \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c message: \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u0431\u0430\u0439\u0442\u0430\u0445 sender_socket: \u0441\u043e\u043a\u0435\u0442, \u043e\u0442\u043a\u0443\u0434\u0430 \u043f\u0440\u0438\u0448\u043b\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 ''' with clients_lock : for client in list ( clients ): # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c try : client . send ( message . encode ( 'utf-8' )) except Exception : # \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u043c, \u0447\u0442\u043e \u0435\u0441\u043b\u0438 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, # \u0442\u043e \u043e\u043d \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0435\u0433\u043e \u0441\u043e\u043a\u0435\u0442 client . close () del clients [ client ] def handle_client ( client_socket : socket . socket , client_address : Tuple [ str , int ]) -> None : ''' \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u0435 \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0438 \u0440\u0430\u0441\u0441\u044b\u043b\u0430\u0435\u0442 \u0432\u0441\u0435\u043c \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c client_socket: \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u0441\u043e\u043a\u0435\u0442 client_address: \u043f\u0430\u0440\u0430 (IP, \u043f\u043e\u0440\u0442) ''' nickname = client_socket . recv ( 1024 ) . decode ( 'utf-8' ) . strip () # \u0414\u043e\u0431\u0430\u0432\u0438\u043b\u0438 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0451\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 with clients_lock : clients [ client_socket ] = nickname print ( f '[\u0421\u0435\u0440\u0432\u0435\u0440]: { nickname } \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f \u043a \u0447\u0430\u0442\u0443' ) while True : try : msg = client_socket . recv ( 1024 ) if not msg : print ( f '\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c [ { client_address } / { nickname } ] \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u043e\u0442 \u0447\u0430\u0442\u0430' ) broadcast ( f '[\u0421\u0435\u0440\u0432\u0435\u0440]: { nickname } \u043f\u043e\u043a\u0438\u043d\u0443\u043b \u0447\u0430\u0442' ) break message_text = msg . decode ( 'utf-8' ) # \u0412\u044b\u0432\u043e\u0434 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u0430 print ( f ' { nickname } : { message_text } ' ) # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c broadcast ( f ' { nickname } : { message_text } ' ) except ConnectionResetError : # \u0415\u0441\u043b\u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0431\u044b\u043b\u043e \u043e\u0431\u043e\u0440\u0432\u0430\u043d\u043e print ( f ' { client_address } \u0432\u044b\u043b\u0435\u0442\u0435\u043b' ) break except Exception as e : print ( f '\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 { client_address } : { e } ' ) # \u041f\u043e\u0441\u043b\u0435 \u0432\u044b\u0445\u043e\u0434\u0430 \u0438\u0437 \u0446\u0438\u043a\u043b\u0430 \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u043c \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u0438 # \u0437\u0430\u0432\u0435\u0440\u0449\u0430\u0435\u043c \u0441\u0435\u0441\u0441\u0438\u044e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f with clients_lock : if client_socket in clients : del clients [ client_socket ] client_socket . close () def run_server ( server_host : str = 'localhost' , server_port : int = 8080 ) -> None : ''' \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u0447\u0430\u0442\u0430 host: IP-\u0430\u0434\u0440\u0435\u0441 \u0434\u043b\u044f \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 port: \u043f\u043e\u0440\u0442 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u044f ''' with socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) as server : server . bind (( server_host , server_port )) server . listen ( 5 ) print ( f '\u0421\u0435\u0440\u0432\u0435\u0440 \u0447\u0430\u0442\u0430 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 { server_host } : { server_port } ' ) while True : client_socket , client_address = server . accept () # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a thread = threading . Thread ( target = handle_client , args = ( client_socket , client_address ), daemon = True ) thread . start () if __name__ == '__main__' : run_server () \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0432\u043e\u0439 \u043d\u0438\u043a\u043d\u0435\u0439\u043c, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u0434\u0432\u0430 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430: \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044f receive_message , \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043d\u0430 \u044d\u043a\u0440\u0430\u043d, \u0430 \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u0432\u0432\u043e\u0434\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u0445 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440. \u0415\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 /exit , \u043e\u043d \u0432\u044b\u0445\u043e\u0434\u0438\u0442 \u0438\u0437 \u0447\u0430\u0442\u0430, \u0440\u0430\u0437\u0440\u044b\u0432\u0430\u044f \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 client.py : import threading import socket def receive_message ( client : socket . socket ) -> None : ''' \u041f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e \u0436\u0434\u0451\u0442 \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0412\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u0435 client: \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u0441\u043e\u043a\u0435\u0442 ''' while True : try : msg = client . recv ( 1024 ) if not msg : print ( '\u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u0440\u0430\u0437\u043e\u0440\u0432\u0430\u043d\u043e' ) break print ( f ' { msg . decode ( \"utf-8\" ) } ' ) except Exception : print ( '\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u0440\u0438\u0451\u043c\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439' ) break def run_client ( server_host : str = 'localhost' , server_port : int = 8080 ) -> None : ''' \u0417\u0430\u043f\u0443\u0441\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u043c\u0443 \u0447\u0430\u0442\u0443 server_host: IP \u0441\u0435\u0440\u0432\u0435\u0440\u0430 server_port: \u043f\u043e\u0440\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 ''' with socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) as client : client . connect (( server_host , server_port )) print ( f '\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 { server_host } : { server_port } ' ) # \u041f\u0440\u0438\u0441\u0432\u043e\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u043d\u0438\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f nickname = input ( '\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0430\u0448 \u043d\u0438\u043a\u043d\u0435\u0439\u043c: ' ) client . send ( nickname . encode ( 'utf-8' )) # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \u0434\u043b\u044f \u043f\u0440\u0438\u0451\u043c\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 threading . Thread ( target = receive_message , args = ( client ,), daemon = True ) . start () # \u0426\u0438\u043a\u043b \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u0435 while True : msg = input ( '>>> ' ) if msg . lower () == '/exit' : # \u0412\u044b\u0445\u043e\u0434 \u0438\u0437 \u0447\u0430\u0442\u0430 print ( '\u0412\u044b\u0445\u043e\u0434 \u0438\u0437 \u0447\u0430\u0442\u0430' ) break try : client . send ( msg . encode ( 'utf-8' )) except Exception : print ( '\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f' ) break if __name__ == '__main__' : run_client () \u0412 \u0438\u0442\u043e\u0433\u0435 \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u043e\u0431\u0449\u0438\u0439 \u0447\u0430\u0442, \u0433\u0434\u0435 \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u0442\u0440\u0430\u043d\u0441\u043b\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0432\u0441\u0435\u043c \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u043b\u043e\u0433 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439, \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 \u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u044b \u043c\u043e\u0433\u0443\u0442 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u043e \u043e\u0431\u043c\u0435\u043d\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 5 - CRUD HTTP-\u0441\u0435\u0440\u0432\u0435\u0440 \u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043f\u0440\u043e\u0441\u0442\u043e\u0439 HTTP-\u0441\u0435\u0440\u0432\u0435\u0440 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443\u043c\u0435\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c GET \u0438 POST \u0437\u0430\u043f\u0440\u043e\u0441\u044b. \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0446\u0435\u043b\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u2014 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0438 \u043e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c. \u0414\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0438 \u0447\u0438\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u0438 \u043a\u043e\u0434\u0430 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u044b \u0434\u0432\u0430 \u043a\u043b\u0430\u0441\u0441\u0430: Request \u0438 MyHTTPServer \u041d\u0430\u0447\u043d\u0451\u043c \u0441 \u043a\u043b\u0430\u0441\u0441\u0430 Request . \u0415\u0433\u043e \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u2014 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0435 \u0432 \u043e\u0434\u043d\u043e\u043c \u043c\u0435\u0441\u0442\u0435. \u041a\u043e\u0433\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441, \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043c\u0435\u0442\u043e\u0434\u0443, \u043a \u043f\u0443\u0442\u0438, \u043a \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c, \u043a \u0432\u0435\u0440\u0441\u0438\u0438 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430, \u043a \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\u043c \u0438, \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438, \u043a \u0442\u0435\u043b\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u0430. \u0412\u0441\u0451 \u044d\u0442\u043e \u0430\u043a\u043a\u0443\u0440\u0430\u0442\u043d\u043e \u0443\u043f\u0430\u043a\u043e\u0432\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u043e\u0431\u044a\u0435\u043a\u0442 Request , \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u0441\u0435\u0440\u0432\u0435\u0440 \u043c\u043e\u0433 \u0441 \u043d\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c. \u041a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u044d\u0442\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0442\u0430\u043a: class Request : def __init__ ( self , method : str , addr : str , param : str , version_proto : str , headers : Optional [ Dict [ str , str ]] = None , body : str = '' ) -> None : self . method = method self . addr = addr self . param = param self . version_proto = version_proto self . headers = headers or {} self . body = body \u0413\u043b\u0430\u0432\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 \u0441\u043e\u0441\u0440\u0435\u0434\u043e\u0442\u043e\u0447\u0435\u043d\u0430 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435 MyHTTPServer . \u0418\u043c\u0435\u043d\u043d\u043e \u043e\u043d \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0441\u043e\u043a\u0435\u0442, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f, \u043f\u0430\u0440\u0441\u0438\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u043e\u0442\u0432\u0435\u0442\u044b. \u041f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u044d\u0442\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0430\u0434\u0440\u0435\u0441 \u0438 \u043f\u043e\u0440\u0442, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0441\u043b\u043e\u0432\u0430\u0440\u044c grades , \u0433\u0434\u0435 \u0431\u0443\u0434\u0443\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u043f\u0430\u0440\u044b \u00ab\u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430 \u2014 \u043e\u0446\u0435\u043d\u043a\u0430\u00bb \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 serve_forever . \u0417\u0434\u0435\u0441\u044c \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f TCP-\u0441\u043e\u043a\u0435\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043a \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u0430\u0434\u0440\u0435\u0441\u0443, \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442 \u0441\u043b\u0443\u0448\u0430\u0442\u044c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0438 \u0432 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u043c \u0446\u0438\u043a\u043b\u0435 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432. \u041f\u043e\u0441\u043b\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u0443 serve_client \u0421\u0430\u043c \u043a\u043e\u0434 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0442\u0430\u043a: def serve_forever ( self ) -> None : with socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) as server : server . bind (( self . _host , self . _port )) server . listen ( 1 ) print ( f '\u0421\u0435\u0440\u0432\u0435\u0440 \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u043d\u0430 { self . _host } : { self . _port } ' ) while True : conn , _ = server . accept () try : self . serve_client ( conn ) except Exception as e : print ( f '\u041e\u0448\u0438\u0431\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: { e } ' ) finally : conn . close () \u041c\u0435\u0442\u043e\u0434 serve_client \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441. \u0417\u0434\u0435\u0441\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u044b\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u043e\u0440\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430. \u0421\u043d\u0430\u0447\u0430\u043b\u0430 parse_request \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u0435\u0440\u0432\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, GET /grades HTTP/1.1 ), \u0432\u044b\u0434\u0435\u043b\u044f\u0435\u0442 \u043c\u0435\u0442\u043e\u0434, \u043f\u0443\u0442\u044c, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438 \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 Request . \u0417\u0430\u0442\u0435\u043c \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f parse_headers , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442 \u0441\u043b\u043e\u0432\u0430\u0440\u044c. \u0415\u0441\u043b\u0438 \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\u0445 \u0443\u043a\u0430\u0437\u0430\u043d Content-Length , \u0442\u043e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442, \u0447\u0442\u043e \u0437\u0430\u043f\u0440\u043e\u0441 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u0435\u043b\u043e (\u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e \u0434\u043b\u044f POST), \u0438 \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0440\u043e\u0432\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u0439\u0442. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0433\u043e\u0442\u043e\u0432\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442\u0441\u044f \u0432 handle_request \u041f\u0440\u0438\u043c\u0435\u0440 \u043a\u043e\u0434\u0430 \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u043e\u0440\u0430 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432: def parse_headers ( self , stream ) -> Dict [ str , str ]: headers = {} while True : line = stream . readline () . decode ( 'utf-8' ) . strip () if not line : break if ': ' in line : header , value = line . split ( ': ' ) headers [ header ] = value return headers \u0412 \u043c\u0435\u0442\u043e\u0434\u0435 handle_request \u0441\u043e\u0441\u0440\u0435\u0434\u043e\u0442\u043e\u0447\u0435\u043d\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0430. \u0415\u0441\u043b\u0438 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442 GET-\u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0430\u0434\u0440\u0435\u0441 /grades , \u0441\u0435\u0440\u0432\u0435\u0440 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0441 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\u0439 \u043e\u0446\u0435\u043d\u043e\u043a. \u0415\u0441\u043b\u0438 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442 POST-\u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0442\u043e\u0442 \u0436\u0435 \u0430\u0434\u0440\u0435\u0441, \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0444\u043e\u0440\u043c\u044b \u0441 \u043a\u043b\u044e\u0447\u0430\u043c\u0438 subject \u0438 grade . \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u043d\u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044e\u0442\u0441\u044f \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c grades , \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0451\u043d\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430. \u0415\u0441\u043b\u0438 \u0436\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442, \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u043e\u0439 400 \u0427\u0430\u0441\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0438 \u043c\u0435\u0442\u043e\u0434\u0430 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0442\u0430\u043a: if req . method == 'POST' and req . addr == '/grades' : form = parse_qs ( req . body ) subject = form . get ( 'subject' , [ '' ])[ 0 ] grade = form . get ( 'grade' , [ '' ])[ 0 ] if subject and grade : self . grades [ subject ] = grade response_html = self . _render_grades_page () self . send_response ( conn , 200 , 'OK' , response_html ) else : self . send_response ( conn , 400 , 'Bad Request' , '<h2>\u041e\u0448\u0438\u0431\u043a\u0430: \u043d\u0435 \u0437\u0430\u0434\u0430\u043d\u044b subject \u0438\u043b\u0438 grade</h2>' ) \u0414\u043b\u044f \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434 send_response . \u041e\u043d \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, HTTP/1.1 200 OK ), \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 (\u0442\u0438\u043f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e, \u0434\u043b\u0438\u043d\u0430 \u043e\u0442\u0432\u0435\u0442\u0430) \u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u0438\u0445 \u0441 \u0442\u0435\u043b\u043e\u043c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0412\u0441\u0451 \u044d\u0442\u043e \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0431\u0430\u0439\u0442\u044b \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \u0441\u043e\u043a\u0435\u0442 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441 \u043e\u0446\u0435\u043d\u043a\u0430\u043c\u0438 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0432\u043e \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u043c \u043c\u0435\u0442\u043e\u0434\u0435 _render_grades_page . \u0412 \u043d\u0451\u043c \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u044e\u0442\u0441\u044f \u0432\u0441\u0435 \u043f\u0430\u0440\u044b \u00ab\u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430 \u2014 \u043e\u0446\u0435\u043d\u043a\u0430\u00bb \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u044f, \u0441\u043e\u0437\u0434\u0430\u044e\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0432\u043d\u0443\u0442\u0440\u044c \u0448\u0430\u0431\u043b\u043e\u043d\u0430. \u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u0443\u044e HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0441 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u043c \u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\u0439 def _render_grades_page ( self ) -> str : rows = '' . join ( f '<tr><td> { discipline } </td><td> { grade } </td></tr>' for discipline , grade in self . grades . items () ) html = f \"\"\" <html> <head> <title>\u041e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c</title> </head> <body> <h1>\u041e\u0446\u0435\u043d\u043a\u0438 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432</h1> <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\"> <tr> <th>\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430</th> <th>\u041e\u0446\u0435\u043d\u043a\u0430</th> </tr> { rows } </table> </body> </html> \"\"\" return html \u0412 \u0431\u043b\u043e\u043a\u0435 if __name__ == '__main__': \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u043e\u0431\u044a\u0435\u043a\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0430\u0434\u0440\u0435\u0441\u043e\u043c \u0438 \u043f\u043e\u0440\u0442\u043e\u043c, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434 serve_forever , \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0434\u043e \u0442\u0435\u0445 \u043f\u043e\u0440, \u043f\u043e\u043a\u0430 \u0435\u0451 \u043d\u0435 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u041f\u043e\u043b\u043d\u044b\u0439 \u043b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430: import socket from typing import Dict , Optional from urllib.parse import parse_qs class Request : ''' \u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b: method (str): HTTP-\u043c\u0435\u0442\u043e\u0434 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 ('GET', 'POST', ...) addr (str): \u043f\u0443\u0442\u044c \u0438\u043b\u0438 \u0440\u0435\u0441\u0443\u0440\u0441 \u0438\u0437 URL \u0431\u0435\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 param (str): \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432 URL \u043f\u043e\u0441\u043b\u0435 \u0437\u043d\u0430\u043a\u0430 '?' version_proto (str): \u0432\u0435\u0440\u0441\u0438\u044f \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 HTTP \u0437\u0430\u043f\u0440\u043e\u0441\u0430 headers (Optional[Dict[str, str]]): \u0441\u043b\u043e\u0432\u0430\u0440\u044c HTTP-\u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432, \u0433\u0434\u0435 \u043a\u043b\u044e\u0447 \u2014 \u0438\u043c\u044f \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430, \u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u2014 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435 \u0435\u043c\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 body (str): \u0442\u0435\u043b\u043e HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u0430 (\u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435) ''' def __init__ ( self , method : str , addr : str , param : str , version_proto : str , headers : Optional [ Dict [ str , str ]] = None , body : str = '' ) -> None : self . method = method self . addr = addr self . param = param self . version_proto = version_proto self . headers = headers or {} self . body = body class MyHTTPServer : ''' \u041a\u043b\u0430\u0441\u0441 HTTP-\u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u043e\u043a\u0435\u0442\u043e\u0432 ''' def __init__ ( self , host : str , port : int , server_name : Optional [ str ] = None ) -> None : self . _host = host self . _port = port self . _server_name = server_name # \u0445\u0440\u0430\u043d\u0438\u0442 \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c self . grades : Dict [ str , str ] = {} # {\u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430: \u043e\u0446\u0435\u043d\u043a\u0430} def serve_forever ( self ) -> None : ''' \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043d\u0430 \u0441\u043e\u043a\u0435\u0442\u0435, \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f ''' # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u0441\u043e\u043a\u0435\u0442 with socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) as server : server . bind (( self . _host , self . _port )) server . listen ( 1 ) # \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0441 \u043e\u0434\u043d\u0438\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c print ( f '\u0421\u0435\u0440\u0432\u0435\u0440 \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u043d\u0430 { self . _host } : { self . _port } ' ) # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0435 \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0451\u043d\u043d\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 while True : conn , _ = server . accept () try : self . serve_client ( conn ) except Exception as e : print ( f '\u041e\u0448\u0438\u0431\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: { e } ' ) finally : conn . close () # \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u0441\u043b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 def serve_client ( self , conn : socket . socket ) -> None : ''' \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434\u044b \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 ''' # \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u043d\u043e\u0433\u043e \u0447\u0442\u0435\u043d\u0438\u044f \u0432 \u043f\u043e\u0442\u043e\u043a\u0435 stream = conn . makefile ( 'rb' ) # \u043f\u0430\u0440\u0441\u0438\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 request = self . parse_request ( stream ) # --> Request headers = self . parse_headers ( stream ) # \u0442\u043a request \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0438\u0437 \u043c\u0435\u0442\u043e\u0434\u0430 parse_request \u043a\u0430\u043a \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043b\u0430\u0441\u0441\u0430 Request, \u0442\u043e \u043d\u0430\u043c \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0432\u0441\u0435 \u0435\u0433\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 request . headers = headers content_length = int ( headers . get ( 'Content-Length' , '0' )) if content_length > 0 : # \u0415\u0441\u043b\u0438 \u0442\u0435\u043b\u043e HTTP \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0435\u0441\u0442\u044c (POST), \u0447\u0438\u0442\u0430\u0435\u043c \u0440\u043e\u0432\u043d\u043e content_length \u0431\u0430\u0439\u0442 \u0438\u0437 \u043f\u043e\u0442\u043e\u043a\u0430 request . body = stream . read ( content_length ) . decode ( 'utf-8' ) else : request . body = '' # \u041f\u0435\u0440\u0435\u0434\u0430\u0451\u043c \u0440\u0430\u0441\u043f\u0430\u0440\u0441\u0435\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 \u0432 \u0445\u044d\u043d\u0434\u043b\u0435\u0440 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0438, \u043e\u043d \u0443\u0436\u0435 \u0440\u0435\u0448\u0438\u0442, \u0447\u0442\u043e \u0441 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u043c \u0434\u0435\u043b\u0430\u0442\u044c self . handle_request ( conn , request ) def parse_request ( self , stream ) -> Request : ''' \u041f\u0430\u0440\u0441\u0438\u0442 \u043f\u0435\u0440\u0432\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u0430 (request line) \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 Request \u0441 \u043c\u0435\u0442\u043e\u0434\u043e\u043c, \u0430\u0434\u0440\u0435\u0441\u043e\u043c, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u0438 \u0432\u0435\u0440\u0441\u0438\u0435\u0439 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 ''' request_line = stream . readline () . decode ( 'utf-8' ) . strip () if not request_line : raise ValueError ( '\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 request line' ) method , url , version_proto = request_line . split ( ' ' ) addr , * param = url . split ( '?' , 1 ) # \u0435\u0441\u043b\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043d\u0435 \u0431\u044b\u043b\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u044b param = param [ 0 ] if param else '' return Request ( method , addr , param , version_proto ) def parse_headers ( self , stream ) -> Dict [ str , str ]: ''' \u041f\u0430\u0440\u0441\u0438\u0442 HTTP-\u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438\u0437 \u043f\u043e\u0442\u043e\u043a\u0430 \u0434\u043e \u043f\u0443\u0441\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 ''' # next(request_lines) # \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u043c request line, \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0434\u043e\u043b\u044c\u043a\u043e \u0441 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\u043c\u0438 headers = {} while True : line = stream . readline () . decode ( 'utf-8' ) . strip () # \u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a \u043a\u043e\u0433\u0434\u0430 \u0434\u043e\u0445\u043e\u0434\u0438\u043c \u0434\u043e \u043f\u0443\u0441\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 if not line : break if ': ' in line : header , value = line . split ( ': ' ) headers [ header ] = value return headers def handle_request ( self , conn : socket . socket , req : Request ) -> None : ''' \u041b\u043e\u0433\u0438\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 (GET, POST) ''' # GET /grades -- \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043e\u043a if req . method == 'GET' and req . addr == '/grades' : # \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c HTML \u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043a\u0443 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441 200 \u043a\u043e\u0434\u043e\u043c response_html = self . _render_grades_page () self . send_response ( conn , 200 , 'OK' , response_html ) # POST /grades?subject=*&grade=* -- \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u043e\u0446\u0435\u043d\u043a\u0443 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 if req . method == 'POST' and req . addr == '/grades' : # \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0442\u0435\u043b\u0430 \u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u043e\u0446\u0435\u043d\u043a\u0438 form = parse_qs ( req . body ) subject = form . get ( 'subject' , [ '' ])[ 0 ] grade = form . get ( 'grade' , [ '' ])[ 0 ] # \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438 \u043f\u0440\u0435\u0434\u043c\u0435\u0442, \u0438 \u043e\u0446\u0435\u043d\u043a\u0430 if subject and grade : # \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u043f\u0440\u0435\u0434\u043c\u0435\u0442 \u0438 \u043e\u0446\u0435\u043d\u043a\u0443 self . grades [ subject ] = grade # \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u043e\u0446\u0435\u043d\u043a\u0430\u043c\u0438 + \u043d\u043e\u0432\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 response_html = self . _render_grades_page () self . send_response ( conn , 200 , 'OK' , response_html ) else : # \u041f\u0440\u0438 \u043e\u0448\u0438\u0431\u043a\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u044b \u0438\u043b\u0438 \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u0438\u0434\u0430\u0435\u043c 400 \u043e\u0448\u0438\u0431\u043a\u0443 self . send_response ( conn , 400 , 'Bad Request' , '<h2>\u041e\u0448\u0438\u0431\u043a\u0430: \u043d\u0435 \u0437\u0430\u0434\u0430\u043d\u044b subject \u0438\u043b\u0438 grade</h2>' ) def send_response ( self , conn : socket . socket , code : int , reason : str , body : str , content_type : str = 'text/html; charset=utf-8' ) -> None : ''' \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 HTTP-\u043e\u0442\u0432\u0435\u0442 ''' response_headers = [ f 'HTTP/1.1 { code } { reason } ' , f 'Content-Type: { content_type } ' , f 'Content-Length: { len ( body . encode ( \"utf-8\" )) } ' , '' , '' , ] # \u041f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438 \u0442\u0435\u043b\u043e \u0432 \u0431\u0430\u0439\u0442\u044b header_bytes = ' \\r\\n ' . join ( response_headers ) . encode ( 'utf-8' ) body_bytes = body . encode ( 'utf-8' ) # \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 \u0438 \u0442\u0435\u043b\u0430 conn . sendall ( header_bytes + body_bytes ) def _render_grades_page ( self ) -> str : ''' \u0420\u0435\u043d\u0434\u0435\u0440\u0438\u0442 (\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442) HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u043e\u0446\u0435\u043d\u043a\u0430\u043c\u0438 ''' # \u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 (\u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430 -- \u043e\u0446\u0435\u043d\u043a\u0430) rows = '' . join ( f '<tr><td> { discipline } </td><td> { grade } </td></tr>' for discipline , grade in self . grades . items ()) # \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b html = f \"\"\" <html> <head> <title>\u041e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c</title> </head> <body> <h1>\u041e\u0446\u0435\u043d\u043a\u0438 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432</h1> <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\"> <tr> <th>\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430</th> <th>\u041e\u0446\u0435\u043d\u043a\u0430</th> </tr> { rows } </table> </body> </html> \"\"\" return html if __name__ == '__main__' : host = 'localhost' port = 8080 name = 'Grader' serv = MyHTTPServer ( host , port , name ) try : serv . serve_forever () except KeyboardInterrupt : print ( '\u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d' )","title":"Lab 1"},{"location":"labs/lab1/#_1","text":"\u0421\u043e\u043a\u0435\u0442 - \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044f \u041e\u0421, \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430\u043c \u043e\u0431\u043c\u0435\u043d\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439. \u0420\u0430\u0437\u043b\u0438\u0447\u0430\u044e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u044b\u0435 \u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0435 \u0441\u043e\u043a\u0435\u0442\u044b. \u0421\u0435\u0440\u0432\u0435\u0440\u043d\u044b\u0439 \u0441\u043e\u043a\u0435\u0442 : \u0423\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0430\u0434\u0440\u0435\u0441 \u0438 \u043f\u043e\u0440\u0442 \u0441\u043e\u043a\u0435\u0442\u0430 ( bind() ) \u0421\u043b\u0443\u0448\u0430\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f ( listen() ) \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 ( accept() ) \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0438 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 ( send , recv ) \u041a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u0441\u043e\u043a\u0435\u0442 : \u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u043c\u0443 \u0441\u043e\u043a\u0435\u0442\u0443 ( connect() ) \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0438 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 ( send , recv ) \u0421\u043e\u043a\u0435\u0442\u044b \u043c\u043e\u0433\u0443\u0442 \u0435\u0449\u0451 \u0438\u043c\u0435\u0442\u044c \u0440\u0430\u0437\u043d\u0443\u044e \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u044e : \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c IPv4 \u0438\u043b\u0438 IPv6, \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u043f\u043e\u0432\u0435\u0440\u0445 TCP \u0438\u043b\u0438 UDP, \u0438\u043c\u0435\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0439 \u0442\u0438\u043f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 - \u043f\u043e\u0442\u043e\u043a\u043e\u0432\u044b\u044b\u0439 \u0438\u043b\u0438 \u0434\u0430\u0442\u0430\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439.","title":"\u0421\u043e\u043a\u0435\u0442\u044b"},{"location":"labs/lab1/#udp-vs-tcp","text":"","title":"\u0427\u0443\u0442\u044c \u043f\u0440\u043e UDP vs TCP"},{"location":"labs/lab1/#udp","text":"UDP \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0431\u044b\u0441\u0442\u0440\u043e, \u043d\u043e \u0446\u0435\u043b\u043e\u0441\u0442\u043d\u043e\u0441\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0435 \u0433\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f. \u0414\u043b\u044f UDP \u043d\u0435 \u043d\u0430\u0434\u043e \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0442\u044c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f, \u043c\u043e\u0436\u043d\u043e \u0441\u0440\u0430\u0437\u0443 \u043d\u0430\u0447\u0438\u043d\u0430\u0442\u044c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043f\u0430\u043a\u0435\u0442\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0414\u0430\u043d\u043d\u044b\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0434\u0430\u0442\u0430\u0433\u0440\u0430\u043c\u043c\u0430\u043c\u0438 (\u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u0440\u043e\u0431\u044f\u0442\u0441\u044f \u043d\u0430 \u0431\u043e\u043b\u0435\u0435 \u043c\u0435\u043b\u043a\u0438\u0435 \u043f\u0430\u043a\u0435\u0442\u044b) \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0441\u043f\u043b\u043e\u0448\u043d\u044b\u043c \u043f\u043e\u0442\u043e\u043a\u043e\u043c, \u043d\u0435 \u043e\u0436\u0438\u0434\u0430\u044f \u0444\u0438\u0434\u0431\u0435\u043a\u0430 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0441\u0442\u0440\u0438\u043c\u043c\u0438\u043d\u0433\u0430 \u0432\u0438\u0434\u0435\u043e \u0438 \u0430\u0443\u0434\u0438\u043e, VoIP, \u043e\u043d\u043b\u0430\u0439\u043d-\u0438\u0433\u0440","title":"UDP \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b"},{"location":"labs/lab1/#tcp","text":"TCP \u0431\u043e\u043b\u0435\u0435 \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b\u0439 \u0438 \u043d\u0430\u0434\u0451\u0436\u043d\u044b\u0439 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b \u043f\u043e\u0442\u043e\u043a\u043e\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0434\u0430\u043d\u043d\u044b\u0445, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d: \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u043c\u0435\u0436\u0434\u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u0432\u0441\u0435 \u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043e\u0441\u0442\u0430\u0432\u0438\u043b\u0438\u0441\u044c \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u041f\u043e \u0444\u0430\u043a\u0442\u0443 \u043d\u0430 payload \u043d\u0430\u0432\u0435\u0448\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0441\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0435 \u043f\u0430\u043a\u0435\u0442\u044b - IP headers \u0438 TCP headers, \u044d\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0434\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435. \u0427\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446, \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0444\u0430\u0439\u043b\u043e\u0432 \u0438 \u043f\u0440\u043e\u0447\u0435\u0435 NB: \u041f\u043e\u0447\u0442\u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043a\u043e\u0434 \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u0430 ( server.py ) \u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 ( client.py ) NB: \u0412\u0430\u0436\u043d\u043e \u043e\u0442\u043c\u0435\u0442\u0438\u0442\u044c \u0435\u0449\u0451 \u0442\u043e, \u0447\u0442\u043e \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \u0441\u043e\u043a\u0435\u0442, \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u0432 \u0431\u0430\u0439\u0442\u044b (\u043c\u0435\u0442\u043e\u0434 .encode() ), \u0430 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f - \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u044b (\u043c\u0435\u0442\u043e\u0434 .decode() )","title":"TCP \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b"},{"location":"labs/lab1/#1-udp","text":"\u041d\u0438\u0447\u0435\u0433\u043e \u0441\u043b\u043e\u0436\u043d\u043e\u0433\u043e, \u043f\u0438\u0448\u0435\u043c \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0441 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0435\u043c \u0441\u043e\u043a\u0435\u0442\u0430 \u0441 type = socket.SOCK_DGRAM (UDP \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b). \u0414\u0430\u043b\u044c\u0448\u0435 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u043a\u0435\u0442 \u043d\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0445\u043e\u0441\u0442\u0435 \u0438 \u043f\u043e\u0440\u0442\u0443 ( bind() ), \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u0434\u043b\u044f server.py : import socket def run_server ( host : str = '127.0.0.1' , port : int = 8080 ) -> None : ''' \u0417\u0430\u043f\u0443\u0441\u043a UDP-\u0441\u0435\u0440\u0432\u0435\u0440\u0430 ''' with socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) as server : server . bind (( host , port )) print ( f 'Server started at { host } : { port } ' ) data , client_addr = server . recvfrom ( 1024 ) print ( f 'Recieved message from client: { data . decode () } ' ) msg = 'Hello, client' server . sendto ( msg . encode (), client_addr ) print ( f 'Sended message to client { client_addr [ 0 ] } : { client_addr [ 1 ] } : { msg } ' ) if __name__ == '__main__' : run_server () \u0414\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0442\u043e\u0436\u0435 \u043f\u0438\u0448\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e, \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c\u0441\u044f \u043a \u0445\u043e\u0441\u0442\u0443 \u0438 \u043f\u043e\u0440\u0442\u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 \u0434\u043b\u044f client.py : import socket def run_client ( server_host : str = '127.0.0.1' , server_port : int = 8080 ): ''' \u0417\u0430\u043f\u0443\u0441\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0441 UDP-\u0441\u0435\u0440\u0432\u0435\u0440\u0443 ''' with socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) as client : msg = 'Hello, server' client . sendto ( msg . encode (), ( server_host , server_port )) print ( f 'Message send to server { server_host } : { server_port } : { msg } ' ) data , _ = client . recvfrom ( 1024 ) print ( f 'Recieced response from server: { data . decode () } ' ) if __name__ == '__main__' : run_client () \u041f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u0432 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0435 \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u043f\u043e\u0442\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0443\u0432\u0438\u0434\u0438\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \"Hello, server\", \u043f\u043e\u0442\u043e\u043c \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u0432\u0435\u0442\u0438\u0442 \u043d\u0430 \u044d\u0442\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\u043c \"Hello, client\". \u041d\u0443 \u0438 \u0437\u0430\u043e\u0434\u043d\u043e \u0431\u0443\u0434\u0443\u0442 \u0432\u0438\u0434\u043d\u044b \u043b\u043e\u0433\u0438 \u043a\u0442\u043e \u0447\u0442\u043e \u043a\u043e\u043c\u0443 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u043b.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 - \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 UDP \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u043e\u043c"},{"location":"labs/lab1/#2-tcp","text":"\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043b\u043e\u0441\u044c \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u043e\u043a\u0435\u0442 \u043d\u0430 TCP, \u0433\u0434\u0435 \u0441\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u043a\u0430\u043a\u0443\u044e-\u043b\u0438\u0431\u043e \u0438\u043d\u0444\u0443 \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0435\u0451, \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u043e\u0442\u0432\u0435\u0442 \u0423 \u043c\u0435\u043d\u044f 1 \u0432\u0430\u0440\u0438\u0430\u043d\u0442, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f \u0442\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430. \u041d\u0438\u0447\u0435\u0433\u043e \u0441\u043b\u043e\u0436\u043d\u043e\u0433\u043e, \u043d\u043e \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b \u0440\u0430\u0437\u043d\u044b\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0442\u0435\u043e\u0440\u0435\u043c\u044b \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 - \u043f\u043e \u043a\u0430\u0442\u0435\u0442\u0430\u043c \u043d\u0430\u0439\u0442\u0438 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0443, \u043f\u043e \u043a\u0430\u0442\u0435\u0442\u0443 \u0438 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0435 \u043d\u0430\u0439\u0442\u0438 \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0439\u0441\u044f \u043a\u0430\u0442\u0435\u0442 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 (\u0438\u043b\u0438 \u043d\u0435\u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435) \u0442\u0435\u043e\u0440\u0435\u043c\u044b \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430, \u0435\u0441\u043b\u0438 \u0434\u0430\u043d\u044b \u0432\u0441\u0435 3 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435. \u042f \u043d\u0430\u043f\u0438\u0441\u0430\u043b\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u044d\u0442\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438: from math import sqrt from typing import Tuple def calculate_pythagorean ( a : float | None = None , b : float | None = None , c : float | None = None ) -> Tuple [ float , float ] | bool : ''' \u041f\u043e\u0434\u0441\u0447\u0451\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043a\u0430\u0442\u0435\u0442\u043e\u0432/\u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u044b \u043f\u043e \u0442\u0435\u043e\u0440\u0435\u043c\u0435 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430 \u0441 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 (\u043c\u0438\u043d\u0438\u043c\u0443\u043c 2 \u043d\u0435 None) ''' count_arguments = sum ( x is None for x in ( a , b , c )) if count_arguments >= 2 : raise ValueError ( '\u0414\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043e \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c 2 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430' ) # 3 \u0441\u043b\u0443\u0447\u0430\u044f \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c if ( a is not None ) and ( b is not None ) and ( c is None ): # \u0434\u0430\u043d\u044b \u0442\u043e\u043b\u044c\u043a\u043e a \u0438 b c = sqrt ( a ** 2 + b ** 2 ) c_squared = c ** 2 return (( c_squared , c )) elif (( a is not None ) and ( b is None ) and ( c is not None )) or \\ (( a is None ) and ( b is not None ) and ( c is not None )): # \u0434\u0430\u043d\u044b \u0442\u043e\u043b\u044c\u043a\u043e a \u0438 c if b is None : b = a a = round ( sqrt ( c ** 2 - b ** 2 ), 2 ) a_squared = round ( a ** 2 , 2 ) return (( a_squared , a )) else : # \u0434\u0430\u043d\u044b a, b \u0438 c return True if (( a ** 2 + b ** 2 ) == ( c ** 2 )) else False \u0414\u0430\u043b\u0435\u0435 \u0438\u0434\u0451\u0442 \u0440\u0430\u0431\u043e\u0442\u0430 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c. \u0421\u0435\u0440\u0432\u0435\u0440 \u0443\u0436\u0435 \u043e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u0442 \u0441\u043e\u043a\u0435\u0442 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c \u0442\u0438\u043f\u043e\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f type = socket.SOCK_STREAM , \u0447\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 TCP \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b \u0438 \u043f\u0440\u043e\u0434\u0435\u043b\u044b\u0432\u0430\u0435\u0442 \u0446\u0435\u043f\u043e\u0447\u043a\u0443 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439: bind() -> listen() -> accept() . \u041f\u043e\u0441\u043b\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0441\u0435\u0440\u0432\u0435\u0440 \u0436\u0434\u0451\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0442 \u043d\u0435\u0433\u043e (\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043b\u044c\u0437\u0432\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e \u0432\u0432\u043e\u0434\u0438\u0442 \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b), \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442, \u0447\u0442\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0440\u0435\u0430\u043b\u044c\u043d\u043e \u0435\u0441\u0442\u044c, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0438\u0445 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044e calculate_pythagorean , \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u0437 \u043d\u0435\u0451 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 server.py : import socket def run_server ( server_host : str = '127.0.0.1' , server_port : int = 8080 ): '''\u0417\u0430\u043f\u0443\u0441\u043a TCP-\u0441\u0435\u0440\u0432\u0435\u0440\u0430''' with socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) as server : server . bind (( server_host , server_port )) server . listen ( 1 ) print ( f '\u0421\u0435\u0440\u0432\u0435\u0440 \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u043d\u0430 { server_host } : { server_port } ' ) conn , addr = server . accept () with conn : print ( f '\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u043c { addr } ' ) data = conn . recv ( 1024 ) if data : params = data . decode () . split ( ',' ) a , b , c = [ int ( x ) if x else None for x in params ] try : result = calculate_pythagorean ( a , b , c ) except Exception as e : conn . sendall ( f '\u041e\u0448\u0438\u0431\u043a\u0430: { e } ' . encode ()) else : conn . sendall ( str ( result ) . encode ()) if __name__ == '__main__' : run_server () \u041a\u043b\u0438\u0435\u043d\u0442 \u0436\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0445\u043e\u0441\u0442\u043e\u043c \u0438 \u043f\u043e\u0440\u0442\u043e\u043c, \u0436\u0434\u0451\u0442 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432\u0432\u043e\u0434\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 client.py : import socket def run_client ( server_host : str = '127.0.0.1' , server_port : int = 8080 ): ''' \u0417\u0430\u043f\u0443\u0441\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a TCP \u0441\u0435\u0440\u0432\u0435\u0440\u0443 ''' with socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) as client : client . connect (( server_host , server_port )) a = input ( '\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0442\u0430 a (\u0438\u043b\u0438 \u043f\u0443\u0441\u0442\u043e): ' ) b = input ( '\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u0430\u0442\u0435\u0442\u0430 b (\u0438\u043b\u0438 \u043f\u0443\u0441\u0442\u043e): ' ) c = input ( '\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u044b c (\u0438\u043b\u0438 \u043f\u0443\u0441\u0442\u043e): ' ) params = ',' . join ([ a , b , c ]) client . sendall ( params . encode ()) data = client . recv ( 1024 ) print ( f '\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: { data . decode () } ' ) if __name__ == '__main__' : run_client ()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 - \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 TCP \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u043e\u043c"},{"location":"labs/lab1/#3-http-","text":"\u0412 \u0442\u0440\u0435\u0442\u044c\u0435\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043b\u043e\u0441\u044c \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 HTTP-\u0441\u0435\u0440\u0432\u0435\u0440 \u043d\u0430 \u0441\u043e\u043a\u0435\u0442\u0430\u0445. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441, \u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0435 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\u043c\u0438 \u0438 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435\u0439. \u0421\u0435\u0440\u0432\u0435\u0440 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043f\u043e\u0432\u0435\u0440\u0445 TCP ( socket.SOCK_STREAM ), \u0442\u0430\u043a \u043a\u0430\u043a HTTP-\u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b \u043e\u0441\u043d\u043e\u0432\u0430\u043d \u0438\u043c\u0435\u043d\u043d\u043e \u043d\u0430 \u043d\u0451\u043c \u0421\u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u043f\u044f\u0442\u044c \u0438\u0434\u0451\u0442 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c bind() -> listen() -> accept() . \u041f\u043e\u0442\u043e\u043c \u0441\u0435\u0440\u0432\u0435\u0440 \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0447\u0435\u0440\u0435\u0437 recv() , \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043a\u0443 \u0438\u0437 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 index.html , \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 HTTP-\u043e\u0442\u0432\u0435\u0442 (\u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u0442\u0430\u0442\u0443\u0441\u0430, \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 (Content-Type, Content-Length \u0438 \u0434\u0440.), \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c \\r\\n\\r\\n \u0438 \u0442\u0435\u043b\u043e \u043e\u0442\u0432\u0435\u0442\u0430) \u0438 \u043e\u0442\u0434\u0430\u0451\u0442 HTTP-\u043e\u0442\u0432\u0435\u0442 200 OK (\u0435\u0441\u043b\u0438 \u0440\u0435\u0430\u043b\u044c\u043d\u043e \u0432\u0441\u0451 \u043e\u043a, \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u043e \u0438 \u0444\u0430\u0439\u043b \u043d\u0430\u0439\u0434\u0435\u043d). \u0415\u0441\u043b\u0438 \u043f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430, \u0442\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0430 404 Not Found \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 server.py : import socket def run_server ( server_host : str = 'localhost' , server_port : int = 8080 ): ''' \u041f\u0440\u043e\u0441\u0442\u043e\u0439 TCP-\u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0443 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 ''' with socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) as server : server . bind (( server_host , server_port )) server . listen ( 1 ) print ( f '\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 { server_host } : { server_port } ' ) conn , addr = server . accept () with conn : print ( f '\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0451\u043d \u043a\u043b\u0438\u0435\u043d\u0442 { addr } ' ) # \u0447\u0438\u0442\u0430\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 data = conn . recv ( 1024 ) print ( f '\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u044b \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: { data } ' ) # \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0430 HTML \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b try : with open ( './index.html' , encoding = 'utf-8' ) as html_page : html_data = html_page . read () html_bytes = html_data . encode ( 'utf-8' ) content_length = len ( html_bytes ) # \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u043c HTTP-\u043e\u0442\u0432\u0435\u0442 \u0441 HTML-\u043a\u043e\u043d\u0442\u0435\u043d\u0442\u043e\u043c http_response = ( \"HTTP/1.1 200 OK \\r\\n \" \"Content-Type: text/html; charset=UTF-8 \\r\\n \" f \"Content-Length: { content_length } \\r\\n \" \"Connection: close \\r\\n \" \" \\r\\n \" ) # \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0443 HTML \u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043a\u0443 conn . sendall ( http_response . encode () + html_bytes ) except FileNotFoundError : error_message = \"<html><body><h1>404 Not Found</h1><p>\u0424\u0430\u0439\u043b \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d</p></body></html>\" error_bytes = error_message . encode ( 'utf-8' ) content_length = len ( error_bytes ) http_response = ( \"HTTP/1.1 404 Not Found \\r\\n \" \"Content-Type: text/html; charset=UTF-8 \\r\\n \" f \"Content-Length: { content_length } \\r\\n \" \"Connection: close \\r\\n \" \" \\r\\n \" ) conn . sendall ( http_response . encode ( 'utf-8' ) + error_bytes ) if __name__ == \"__main__\" : run_server () HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 ( index.html ), \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u0434\u0430\u0451\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443: <!DOCTYPE html> < html > < head > < title > \u0421\u043e\u043a\u0435\u0442 \u043d\u0430 Python </ title > </ head > < body > < h1 > \u0418\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e, \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e </ h1 > < p > \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0447\u0442\u043e \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u0432\u044b\u0439\u0434\u0435\u0442 </ p > </ body > </ html > \u041f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u0438 \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 \u0430\u0434\u0440\u0435\u0441\u0430 http://localhost:8080/ \u043a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 GET-\u0437\u0430\u043f\u0440\u043e\u0441, \u0441\u0435\u0440\u0432\u0435\u0440 \u0435\u0433\u043e \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 HTML-\u043a\u043e\u043d\u0442\u0435\u043d\u0442 \u041f\u0440\u0438\u043c\u0435\u0440 GET-\u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043e\u0442 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0430: GET / HTTP/1.1\\r\\nHost: localhost:8080\\r\\nConnection: keep-alive\\r\\nsec-ch-ua: \"Chromium\";v=\"140\", \"Not=A?Brand\";v=\"24\", \"Google Chrome\";v=\"140\"\\r\\nsec-ch-ua-mobile: ?0\\r\\nsec-ch-ua-platform: \"macOS\"\\r\\nUpgrade-Insecure-Requests: 1\\r\\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/140.0.0.0 Safari/537.36\\r\\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\\r\\nSec-Fetch-Site: none\\r\\nSec-Fetch-Mode: navigate\\r\\nSec-Fetch-User: ?1\\r\\nSec-Fetch-Dest: document\\r\\nAccept-Encoding: gzip, deflate, br, zstd\\r\\nAccept-Language: en-GB,en-US;q=0.9,en;q=0.8,ru;q=0 7\\r\\n\\r\\n \u0412 \u0438\u0442\u043e\u0433\u0435 \u0432 \u0431\u0440\u0430\u0443\u0437\u0435\u0440\u0435 \u0431\u0443\u0434\u0435\u0442 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u043c \u0438 \u0442\u0435\u043a\u0441\u0442\u043e\u043c \u0438\u0437 index.html . \u0415\u0441\u043b\u0438 \u0444\u0430\u0439\u043b \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442, \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u0432\u043c\u0435\u0441\u0442\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e 404 Not Found","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 - HTTP-\u0441\u0435\u0440\u0432\u0435\u0440"},{"location":"labs/lab1/#4-","text":"\u042f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043b\u0430 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u043d\u0430 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0435 TCP \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 threading \u0421\u0435\u0440\u0432\u0435\u0440 \u0445\u0440\u0430\u043d\u0438\u0442 \u0432\u0441\u0435\u0445 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0451\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u043e\u0431\u0449\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u0435, \u0433\u0434\u0435 \u043a\u043b\u044e\u0447\u043e\u043c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0441\u043e\u043a\u0435\u0442, \u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u2014 \u043d\u0438\u043a\u043d\u0435\u0439\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0414\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u043c\u044b\u043c \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u043c (\u0441\u043f\u0438\u0441\u043a\u043e\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432) \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0430 ( threading.Lock ), \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c race condition. \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439: \u0441\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u0438 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442 \u0441\u043b\u0443\u0448\u0430\u0442\u044c \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f, \u043f\u0440\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u043d\u043e\u0432\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u043f\u043e\u0442\u043e\u043a, \u0433\u0434\u0435 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f (\u043d\u0438\u043a\u043d\u0435\u0439\u043c \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u0435\u0440\u0432\u044b\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\u043c), \u0437\u0430\u0442\u0435\u043c \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u0446\u0438\u043a\u043b \u043f\u0440\u0438\u0451\u043c\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439. \u041a\u0430\u0436\u0434\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u0440\u0430\u0441\u0441\u044b\u043b\u0430\u0435\u0442 \u0432\u0441\u0435\u043c \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0447\u0435\u0440\u0435\u0437 \u0444\u0443\u043d\u043a\u0446\u0438\u044e broadcast . \u0415\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043e\u0442\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0438\u043b\u0438 \u0435\u0433\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u043e\u0431\u0440\u044b\u0432\u0430\u0435\u0442\u0441\u044f, \u0441\u0435\u0440\u0432\u0435\u0440 \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0435\u0433\u043e \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u0430\u043a\u0442\u0438\u0432\u043d\u044b\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0438 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u044f\u0435\u0442 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u043e \u0432\u044b\u0445\u043e\u0434\u0435 \u0438\u0437 \u0447\u0430\u0442\u0430 \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 server.py : import socket import threading from typing import Tuple , Dict # \u043a\u043b\u0438\u0435\u043d\u0442 == \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c # \u0425\u0440\u0430\u043d\u0438\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0451\u043d\u043d\u044b\u0435 \u0441\u043e\u043a\u0435\u0442\u044b (\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439) clients : Dict [ socket . socket , str ] = {} # \u0441\u043e\u043a\u0435\u0442: \u043d\u0438\u043a\u043d\u0435\u0439\u043c # \u0431\u043b\u043e\u043a\u0438\u0440\u043e\u0432\u043a\u0430, \u0447\u0442\u043e\u0431\u044b \u043d\u0435 \u0431\u044b\u043b\u043e race condition clients_lock = threading . Lock () def broadcast ( message : str ) -> None : ''' \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c message: \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u0431\u0430\u0439\u0442\u0430\u0445 sender_socket: \u0441\u043e\u043a\u0435\u0442, \u043e\u0442\u043a\u0443\u0434\u0430 \u043f\u0440\u0438\u0448\u043b\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 ''' with clients_lock : for client in list ( clients ): # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c try : client . send ( message . encode ( 'utf-8' )) except Exception : # \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u043c, \u0447\u0442\u043e \u0435\u0441\u043b\u0438 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, # \u0442\u043e \u043e\u043d \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u0435\u0433\u043e \u0441\u043e\u043a\u0435\u0442 client . close () del clients [ client ] def handle_client ( client_socket : socket . socket , client_address : Tuple [ str , int ]) -> None : ''' \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u0435 \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c \u0438 \u0440\u0430\u0441\u0441\u044b\u043b\u0430\u0435\u0442 \u0432\u0441\u0435\u043c \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f\u043c client_socket: \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u0441\u043e\u043a\u0435\u0442 client_address: \u043f\u0430\u0440\u0430 (IP, \u043f\u043e\u0440\u0442) ''' nickname = client_socket . recv ( 1024 ) . decode ( 'utf-8' ) . strip () # \u0414\u043e\u0431\u0430\u0432\u0438\u043b\u0438 \u043d\u043e\u0432\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0451\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 with clients_lock : clients [ client_socket ] = nickname print ( f '[\u0421\u0435\u0440\u0432\u0435\u0440]: { nickname } \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f \u043a \u0447\u0430\u0442\u0443' ) while True : try : msg = client_socket . recv ( 1024 ) if not msg : print ( f '\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c [ { client_address } / { nickname } ] \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u043e\u0442 \u0447\u0430\u0442\u0430' ) broadcast ( f '[\u0421\u0435\u0440\u0432\u0435\u0440]: { nickname } \u043f\u043e\u043a\u0438\u043d\u0443\u043b \u0447\u0430\u0442' ) break message_text = msg . decode ( 'utf-8' ) # \u0412\u044b\u0432\u043e\u0434 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u0430 print ( f ' { nickname } : { message_text } ' ) # \u041e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u043c \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c broadcast ( f ' { nickname } : { message_text } ' ) except ConnectionResetError : # \u0415\u0441\u043b\u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0431\u044b\u043b\u043e \u043e\u0431\u043e\u0440\u0432\u0430\u043d\u043e print ( f ' { client_address } \u0432\u044b\u043b\u0435\u0442\u0435\u043b' ) break except Exception as e : print ( f '\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0440\u0430\u0431\u043e\u0442\u0435 \u0441 { client_address } : { e } ' ) # \u041f\u043e\u0441\u043b\u0435 \u0432\u044b\u0445\u043e\u0434\u0430 \u0438\u0437 \u0446\u0438\u043a\u043b\u0430 \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u043c \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u0438 # \u0437\u0430\u0432\u0435\u0440\u0449\u0430\u0435\u043c \u0441\u0435\u0441\u0441\u0438\u044e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f with clients_lock : if client_socket in clients : del clients [ client_socket ] client_socket . close () def run_server ( server_host : str = 'localhost' , server_port : int = 8080 ) -> None : ''' \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u0447\u0430\u0442\u0430 host: IP-\u0430\u0434\u0440\u0435\u0441 \u0434\u043b\u044f \u043f\u0440\u0438\u0432\u044f\u0437\u043a\u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 port: \u043f\u043e\u0440\u0442 \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u044f ''' with socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) as server : server . bind (( server_host , server_port )) server . listen ( 5 ) print ( f '\u0421\u0435\u0440\u0432\u0435\u0440 \u0447\u0430\u0442\u0430 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 { server_host } : { server_port } ' ) while True : client_socket , client_address = server . accept () # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a thread = threading . Thread ( target = handle_client , args = ( client_socket , client_address ), daemon = True ) thread . start () if __name__ == '__main__' : run_server () \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0432\u043e\u0439 \u043d\u0438\u043a\u043d\u0435\u0439\u043c, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u0434\u0432\u0430 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430: \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044f receive_message , \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043d\u0430 \u044d\u043a\u0440\u0430\u043d, \u0430 \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0436\u0435\u0442 \u0432\u0432\u043e\u0434\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0438\u0445 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440. \u0415\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 /exit , \u043e\u043d \u0432\u044b\u0445\u043e\u0434\u0438\u0442 \u0438\u0437 \u0447\u0430\u0442\u0430, \u0440\u0430\u0437\u0440\u044b\u0432\u0430\u044f \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430 client.py : import threading import socket def receive_message ( client : socket . socket ) -> None : ''' \u041f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e \u0436\u0434\u0451\u0442 \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0412\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u0435 client: \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0438\u0439 \u0441\u043e\u043a\u0435\u0442 ''' while True : try : msg = client . recv ( 1024 ) if not msg : print ( '\u0421\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u0440\u0430\u0437\u043e\u0440\u0432\u0430\u043d\u043e' ) break print ( f ' { msg . decode ( \"utf-8\" ) } ' ) except Exception : print ( '\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043f\u0440\u0438\u0451\u043c\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439' ) break def run_client ( server_host : str = 'localhost' , server_port : int = 8080 ) -> None : ''' \u0417\u0430\u043f\u0443\u0441\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u043c\u0443 \u0447\u0430\u0442\u0443 server_host: IP \u0441\u0435\u0440\u0432\u0435\u0440\u0430 server_port: \u043f\u043e\u0440\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 ''' with socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) as client : client . connect (( server_host , server_port )) print ( f '\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 { server_host } : { server_port } ' ) # \u041f\u0440\u0438\u0441\u0432\u043e\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u043d\u0438\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f nickname = input ( '\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0430\u0448 \u043d\u0438\u043a\u043d\u0435\u0439\u043c: ' ) client . send ( nickname . encode ( 'utf-8' )) # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u043e\u0442\u043e\u043a \u0434\u043b\u044f \u043f\u0440\u0438\u0451\u043c\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 threading . Thread ( target = receive_message , args = ( client ,), daemon = True ) . start () # \u0426\u0438\u043a\u043b \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043d\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u043c \u043f\u043e\u0442\u043e\u043a\u0435 while True : msg = input ( '>>> ' ) if msg . lower () == '/exit' : # \u0412\u044b\u0445\u043e\u0434 \u0438\u0437 \u0447\u0430\u0442\u0430 print ( '\u0412\u044b\u0445\u043e\u0434 \u0438\u0437 \u0447\u0430\u0442\u0430' ) break try : client . send ( msg . encode ( 'utf-8' )) except Exception : print ( '\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f' ) break if __name__ == '__main__' : run_client () \u0412 \u0438\u0442\u043e\u0433\u0435 \u043f\u0440\u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u043e\u0431\u0449\u0438\u0439 \u0447\u0430\u0442, \u0433\u0434\u0435 \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u0442\u0440\u0430\u043d\u0441\u043b\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0432\u0441\u0435\u043c \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u043c. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u043b\u043e\u0433 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439, \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 \u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439, \u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u044b \u043c\u043e\u0433\u0443\u0442 \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u043e \u043e\u0431\u043c\u0435\u043d\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4 - \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u0441 \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438"},{"location":"labs/lab1/#5-crud-http-","text":"\u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u043f\u0440\u043e\u0441\u0442\u043e\u0439 HTTP-\u0441\u0435\u0440\u0432\u0435\u0440 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443\u043c\u0435\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c GET \u0438 POST \u0437\u0430\u043f\u0440\u043e\u0441\u044b. \u041e\u0441\u043d\u043e\u0432\u043d\u0430\u044f \u0446\u0435\u043b\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u2014 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0438 \u043e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c. \u0414\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0438 \u0447\u0438\u0442\u0430\u0435\u043c\u043e\u0441\u0442\u0438 \u043a\u043e\u0434\u0430 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u044b \u0434\u0432\u0430 \u043a\u043b\u0430\u0441\u0441\u0430: Request \u0438 MyHTTPServer \u041d\u0430\u0447\u043d\u0451\u043c \u0441 \u043a\u043b\u0430\u0441\u0441\u0430 Request . \u0415\u0433\u043e \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u2014 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0435 \u0432 \u043e\u0434\u043d\u043e\u043c \u043c\u0435\u0441\u0442\u0435. \u041a\u043e\u0433\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441, \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043c\u0435\u0442\u043e\u0434\u0443, \u043a \u043f\u0443\u0442\u0438, \u043a \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c, \u043a \u0432\u0435\u0440\u0441\u0438\u0438 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430, \u043a \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\u043c \u0438, \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438, \u043a \u0442\u0435\u043b\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u0430. \u0412\u0441\u0451 \u044d\u0442\u043e \u0430\u043a\u043a\u0443\u0440\u0430\u0442\u043d\u043e \u0443\u043f\u0430\u043a\u043e\u0432\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u043e\u0431\u044a\u0435\u043a\u0442 Request , \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u0442\u043e\u043c \u0441\u0435\u0440\u0432\u0435\u0440 \u043c\u043e\u0433 \u0441 \u043d\u0438\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c. \u041a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u044d\u0442\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0442\u0430\u043a: class Request : def __init__ ( self , method : str , addr : str , param : str , version_proto : str , headers : Optional [ Dict [ str , str ]] = None , body : str = '' ) -> None : self . method = method self . addr = addr self . param = param self . version_proto = version_proto self . headers = headers or {} self . body = body \u0413\u043b\u0430\u0432\u043d\u0430\u044f \u043b\u043e\u0433\u0438\u043a\u0430 \u0441\u043e\u0441\u0440\u0435\u0434\u043e\u0442\u043e\u0447\u0435\u043d\u0430 \u0432 \u043a\u043b\u0430\u0441\u0441\u0435 MyHTTPServer . \u0418\u043c\u0435\u043d\u043d\u043e \u043e\u043d \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0441\u043e\u043a\u0435\u0442, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f, \u043f\u0430\u0440\u0441\u0438\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u043e\u0442\u0432\u0435\u0442\u044b. \u041f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440\u0430 \u044d\u0442\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0430\u0434\u0440\u0435\u0441 \u0438 \u043f\u043e\u0440\u0442, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0441\u043b\u043e\u0432\u0430\u0440\u044c grades , \u0433\u0434\u0435 \u0431\u0443\u0434\u0443\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u043f\u0430\u0440\u044b \u00ab\u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430 \u2014 \u043e\u0446\u0435\u043d\u043a\u0430\u00bb \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 serve_forever . \u0417\u0434\u0435\u0441\u044c \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f TCP-\u0441\u043e\u043a\u0435\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0432\u044f\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043a \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u0430\u0434\u0440\u0435\u0441\u0443, \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442 \u0441\u043b\u0443\u0448\u0430\u0442\u044c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u0438 \u0432 \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u043c \u0446\u0438\u043a\u043b\u0435 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432. \u041f\u043e\u0441\u043b\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u0443 serve_client \u0421\u0430\u043c \u043a\u043e\u0434 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0442\u0430\u043a: def serve_forever ( self ) -> None : with socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) as server : server . bind (( self . _host , self . _port )) server . listen ( 1 ) print ( f '\u0421\u0435\u0440\u0432\u0435\u0440 \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u043d\u0430 { self . _host } : { self . _port } ' ) while True : conn , _ = server . accept () try : self . serve_client ( conn ) except Exception as e : print ( f '\u041e\u0448\u0438\u0431\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: { e } ' ) finally : conn . close () \u041c\u0435\u0442\u043e\u0434 serve_client \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441. \u0417\u0434\u0435\u0441\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u044b\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u043e\u0440\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430. \u0421\u043d\u0430\u0447\u0430\u043b\u0430 parse_request \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u0435\u0440\u0432\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, GET /grades HTTP/1.1 ), \u0432\u044b\u0434\u0435\u043b\u044f\u0435\u0442 \u043c\u0435\u0442\u043e\u0434, \u043f\u0443\u0442\u044c, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0438 \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 Request . \u0417\u0430\u0442\u0435\u043c \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f parse_headers , \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442 \u0441\u043b\u043e\u0432\u0430\u0440\u044c. \u0415\u0441\u043b\u0438 \u0432 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\u0445 \u0443\u043a\u0430\u0437\u0430\u043d Content-Length , \u0442\u043e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442, \u0447\u0442\u043e \u0437\u0430\u043f\u0440\u043e\u0441 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0442\u0435\u043b\u043e (\u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u043e \u0434\u043b\u044f POST), \u0438 \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0440\u043e\u0432\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u0439\u0442. \u041f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e \u043f\u043e\u043b\u043d\u043e\u0441\u0442\u044c\u044e \u0433\u043e\u0442\u043e\u0432\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u0442\u0441\u044f \u0432 handle_request \u041f\u0440\u0438\u043c\u0435\u0440 \u043a\u043e\u0434\u0430 \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u043e\u0440\u0430 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432: def parse_headers ( self , stream ) -> Dict [ str , str ]: headers = {} while True : line = stream . readline () . decode ( 'utf-8' ) . strip () if not line : break if ': ' in line : header , value = line . split ( ': ' ) headers [ header ] = value return headers \u0412 \u043c\u0435\u0442\u043e\u0434\u0435 handle_request \u0441\u043e\u0441\u0440\u0435\u0434\u043e\u0442\u043e\u0447\u0435\u043d\u0430 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0430. \u0415\u0441\u043b\u0438 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442 GET-\u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0430\u0434\u0440\u0435\u0441 /grades , \u0441\u0435\u0440\u0432\u0435\u0440 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0441 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\u0439 \u043e\u0446\u0435\u043d\u043e\u043a. \u0415\u0441\u043b\u0438 \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442 POST-\u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0442\u043e\u0442 \u0436\u0435 \u0430\u0434\u0440\u0435\u0441, \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0444\u043e\u0440\u043c\u044b \u0441 \u043a\u043b\u044e\u0447\u0430\u043c\u0438 subject \u0438 grade . \u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u043d\u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044e\u0442\u0441\u044f \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u044c grades , \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u043e\u0431\u043d\u043e\u0432\u043b\u0451\u043d\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430. \u0415\u0441\u043b\u0438 \u0436\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442, \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u043e\u0439 400 \u0427\u0430\u0441\u0442\u044c \u043b\u043e\u0433\u0438\u043a\u0438 \u043c\u0435\u0442\u043e\u0434\u0430 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0442\u0430\u043a: if req . method == 'POST' and req . addr == '/grades' : form = parse_qs ( req . body ) subject = form . get ( 'subject' , [ '' ])[ 0 ] grade = form . get ( 'grade' , [ '' ])[ 0 ] if subject and grade : self . grades [ subject ] = grade response_html = self . _render_grades_page () self . send_response ( conn , 200 , 'OK' , response_html ) else : self . send_response ( conn , 400 , 'Bad Request' , '<h2>\u041e\u0448\u0438\u0431\u043a\u0430: \u043d\u0435 \u0437\u0430\u0434\u0430\u043d\u044b subject \u0438\u043b\u0438 grade</h2>' ) \u0414\u043b\u044f \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434 send_response . \u041e\u043d \u0441\u043e\u0431\u0438\u0440\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, HTTP/1.1 200 OK ), \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 (\u0442\u0438\u043f \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0433\u043e, \u0434\u043b\u0438\u043d\u0430 \u043e\u0442\u0432\u0435\u0442\u0430) \u0438 \u0441\u043e\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u0438\u0445 \u0441 \u0442\u0435\u043b\u043e\u043c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0412\u0441\u0451 \u044d\u0442\u043e \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0431\u0430\u0439\u0442\u044b \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \u0441\u043e\u043a\u0435\u0442 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441 \u043e\u0446\u0435\u043d\u043a\u0430\u043c\u0438 \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u0432\u043e \u0432\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u043c \u043c\u0435\u0442\u043e\u0434\u0435 _render_grades_page . \u0412 \u043d\u0451\u043c \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u044e\u0442\u0441\u044f \u0432\u0441\u0435 \u043f\u0430\u0440\u044b \u00ab\u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430 \u2014 \u043e\u0446\u0435\u043d\u043a\u0430\u00bb \u0438\u0437 \u0441\u043b\u043e\u0432\u0430\u0440\u044f, \u0441\u043e\u0437\u0434\u0430\u044e\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0432\u043d\u0443\u0442\u0440\u044c \u0448\u0430\u0431\u043b\u043e\u043d\u0430. \u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u0443\u044e HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0441 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u043c \u0438 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\u0439 def _render_grades_page ( self ) -> str : rows = '' . join ( f '<tr><td> { discipline } </td><td> { grade } </td></tr>' for discipline , grade in self . grades . items () ) html = f \"\"\" <html> <head> <title>\u041e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c</title> </head> <body> <h1>\u041e\u0446\u0435\u043d\u043a\u0438 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432</h1> <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\"> <tr> <th>\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430</th> <th>\u041e\u0446\u0435\u043d\u043a\u0430</th> </tr> { rows } </table> </body> </html> \"\"\" return html \u0412 \u0431\u043b\u043e\u043a\u0435 if __name__ == '__main__': \u0441\u043e\u0437\u0434\u0430\u0451\u0442\u0441\u044f \u043e\u0431\u044a\u0435\u043a\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0430\u0434\u0440\u0435\u0441\u043e\u043c \u0438 \u043f\u043e\u0440\u0442\u043e\u043c, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434 serve_forever , \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0434\u043e \u0442\u0435\u0445 \u043f\u043e\u0440, \u043f\u043e\u043a\u0430 \u0435\u0451 \u043d\u0435 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0432\u0440\u0443\u0447\u043d\u0443\u044e \u041f\u043e\u043b\u043d\u044b\u0439 \u043b\u0438\u0441\u0442\u0438\u043d\u0433 \u043a\u043e\u0434\u0430: import socket from typing import Dict , Optional from urllib.parse import parse_qs class Request : ''' \u041a\u043b\u0430\u0441\u0441 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0410\u0442\u0440\u0438\u0431\u0443\u0442\u044b: method (str): HTTP-\u043c\u0435\u0442\u043e\u0434 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 ('GET', 'POST', ...) addr (str): \u043f\u0443\u0442\u044c \u0438\u043b\u0438 \u0440\u0435\u0441\u0443\u0440\u0441 \u0438\u0437 URL \u0431\u0435\u0437 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 param (str): \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432 URL \u043f\u043e\u0441\u043b\u0435 \u0437\u043d\u0430\u043a\u0430 '?' version_proto (str): \u0432\u0435\u0440\u0441\u0438\u044f \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 HTTP \u0437\u0430\u043f\u0440\u043e\u0441\u0430 headers (Optional[Dict[str, str]]): \u0441\u043b\u043e\u0432\u0430\u0440\u044c HTTP-\u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432, \u0433\u0434\u0435 \u043a\u043b\u044e\u0447 \u2014 \u0438\u043c\u044f \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430, \u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u2014 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435 \u0435\u043c\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 body (str): \u0442\u0435\u043b\u043e HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u0430 (\u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u0435) ''' def __init__ ( self , method : str , addr : str , param : str , version_proto : str , headers : Optional [ Dict [ str , str ]] = None , body : str = '' ) -> None : self . method = method self . addr = addr self . param = param self . version_proto = version_proto self . headers = headers or {} self . body = body class MyHTTPServer : ''' \u041a\u043b\u0430\u0441\u0441 HTTP-\u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0441\u043e\u043a\u0435\u0442\u043e\u0432 ''' def __init__ ( self , host : str , port : int , server_name : Optional [ str ] = None ) -> None : self . _host = host self . _port = port self . _server_name = server_name # \u0445\u0440\u0430\u043d\u0438\u0442 \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c self . grades : Dict [ str , str ] = {} # {\u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430: \u043e\u0446\u0435\u043d\u043a\u0430} def serve_forever ( self ) -> None : ''' \u0417\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u043d\u0430 \u0441\u043e\u043a\u0435\u0442\u0435, \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u0438 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f ''' # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u0441\u043e\u043a\u0435\u0442 with socket . socket ( socket . AF_INET , socket . SOCK_STREAM ) as server : server . bind (( self . _host , self . _port )) server . listen ( 1 ) # \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0441 \u043e\u0434\u043d\u0438\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435\u043c print ( f '\u0421\u0435\u0440\u0432\u0435\u0440 \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u043d\u0430 { self . _host } : { self . _port } ' ) # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0431\u0435\u0441\u043a\u043e\u043d\u0435\u0447\u043d\u043e\u0435 \u043f\u0440\u043e\u0441\u043b\u0443\u0448\u0438\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0451\u043d\u043d\u043e\u0433\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430 while True : conn , _ = server . accept () try : self . serve_client ( conn ) except Exception as e : print ( f '\u041e\u0448\u0438\u0431\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: { e } ' ) finally : conn . close () # \u0437\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u0441\u043b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 def serve_client ( self , conn : socket . socket ) -> None : ''' \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043c\u0435\u0442\u043e\u0434\u044b \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 ''' # \u0444\u0430\u0439\u043b\u043e\u0432\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u043d\u043e\u0433\u043e \u0447\u0442\u0435\u043d\u0438\u044f \u0432 \u043f\u043e\u0442\u043e\u043a\u0435 stream = conn . makefile ( 'rb' ) # \u043f\u0430\u0440\u0441\u0438\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 request = self . parse_request ( stream ) # --> Request headers = self . parse_headers ( stream ) # \u0442\u043a request \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f \u0438\u0437 \u043c\u0435\u0442\u043e\u0434\u0430 parse_request \u043a\u0430\u043a \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u043a\u043b\u0430\u0441\u0441\u0430 Request, \u0442\u043e \u043d\u0430\u043c \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b \u0432\u0441\u0435 \u0435\u0433\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 request . headers = headers content_length = int ( headers . get ( 'Content-Length' , '0' )) if content_length > 0 : # \u0415\u0441\u043b\u0438 \u0442\u0435\u043b\u043e HTTP \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0435\u0441\u0442\u044c (POST), \u0447\u0438\u0442\u0430\u0435\u043c \u0440\u043e\u0432\u043d\u043e content_length \u0431\u0430\u0439\u0442 \u0438\u0437 \u043f\u043e\u0442\u043e\u043a\u0430 request . body = stream . read ( content_length ) . decode ( 'utf-8' ) else : request . body = '' # \u041f\u0435\u0440\u0435\u0434\u0430\u0451\u043c \u0440\u0430\u0441\u043f\u0430\u0440\u0441\u0435\u043d\u043d\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 \u0432 \u0445\u044d\u043d\u0434\u043b\u0435\u0440 \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0438, \u043e\u043d \u0443\u0436\u0435 \u0440\u0435\u0448\u0438\u0442, \u0447\u0442\u043e \u0441 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u043c \u0434\u0435\u043b\u0430\u0442\u044c self . handle_request ( conn , request ) def parse_request ( self , stream ) -> Request : ''' \u041f\u0430\u0440\u0441\u0438\u0442 \u043f\u0435\u0440\u0432\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u0430 (request line) \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043e\u0431\u044a\u0435\u043a\u0442 Request \u0441 \u043c\u0435\u0442\u043e\u0434\u043e\u043c, \u0430\u0434\u0440\u0435\u0441\u043e\u043c, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u0438 \u0432\u0435\u0440\u0441\u0438\u0435\u0439 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 ''' request_line = stream . readline () . decode ( 'utf-8' ) . strip () if not request_line : raise ValueError ( '\u041e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 request line' ) method , url , version_proto = request_line . split ( ' ' ) addr , * param = url . split ( '?' , 1 ) # \u0435\u0441\u043b\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043d\u0435 \u0431\u044b\u043b\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u044b param = param [ 0 ] if param else '' return Request ( method , addr , param , version_proto ) def parse_headers ( self , stream ) -> Dict [ str , str ]: ''' \u041f\u0430\u0440\u0441\u0438\u0442 HTTP-\u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438\u0437 \u043f\u043e\u0442\u043e\u043a\u0430 \u0434\u043e \u043f\u0443\u0441\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 ''' # next(request_lines) # \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u043c request line, \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0434\u043e\u043b\u044c\u043a\u043e \u0441 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0430\u043c\u0438 headers = {} while True : line = stream . readline () . decode ( 'utf-8' ) . strip () # \u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u043f\u043e\u0442\u043e\u043a \u043a\u043e\u0433\u0434\u0430 \u0434\u043e\u0445\u043e\u0434\u0438\u043c \u0434\u043e \u043f\u0443\u0441\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 if not line : break if ': ' in line : header , value = line . split ( ': ' ) headers [ header ] = value return headers def handle_request ( self , conn : socket . socket , req : Request ) -> None : ''' \u041b\u043e\u0433\u0438\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 (GET, POST) ''' # GET /grades -- \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043e\u043a if req . method == 'GET' and req . addr == '/grades' : # \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c HTML \u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043a\u0443 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u043c \u0441 200 \u043a\u043e\u0434\u043e\u043c response_html = self . _render_grades_page () self . send_response ( conn , 200 , 'OK' , response_html ) # POST /grades?subject=*&grade=* -- \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043d\u043e\u0432\u0443\u044e \u043e\u0446\u0435\u043d\u043a\u0443 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 if req . method == 'POST' and req . addr == '/grades' : # \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0442\u0435\u043b\u0430 \u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u0435\u043c \u043e\u0446\u0435\u043d\u043a\u0438 form = parse_qs ( req . body ) subject = form . get ( 'subject' , [ '' ])[ 0 ] grade = form . get ( 'grade' , [ '' ])[ 0 ] # \u0415\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0438 \u043f\u0440\u0435\u0434\u043c\u0435\u0442, \u0438 \u043e\u0446\u0435\u043d\u043a\u0430 if subject and grade : # \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u043f\u0440\u0435\u0434\u043c\u0435\u0442 \u0438 \u043e\u0446\u0435\u043d\u043a\u0443 self . grades [ subject ] = grade # \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u043e\u0446\u0435\u043d\u043a\u0430\u043c\u0438 + \u043d\u043e\u0432\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 response_html = self . _render_grades_page () self . send_response ( conn , 200 , 'OK' , response_html ) else : # \u041f\u0440\u0438 \u043e\u0448\u0438\u0431\u043a\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u044b \u0438\u043b\u0438 \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u0438\u0434\u0430\u0435\u043c 400 \u043e\u0448\u0438\u0431\u043a\u0443 self . send_response ( conn , 400 , 'Bad Request' , '<h2>\u041e\u0448\u0438\u0431\u043a\u0430: \u043d\u0435 \u0437\u0430\u0434\u0430\u043d\u044b subject \u0438\u043b\u0438 grade</h2>' ) def send_response ( self , conn : socket . socket , code : int , reason : str , body : str , content_type : str = 'text/html; charset=utf-8' ) -> None : ''' \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 HTTP-\u043e\u0442\u0432\u0435\u0442 ''' response_headers = [ f 'HTTP/1.1 { code } { reason } ' , f 'Content-Type: { content_type } ' , f 'Content-Length: { len ( body . encode ( \"utf-8\" )) } ' , '' , '' , ] # \u041f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u043c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438 \u0438 \u0442\u0435\u043b\u043e \u0432 \u0431\u0430\u0439\u0442\u044b header_bytes = ' \\r\\n ' . join ( response_headers ) . encode ( 'utf-8' ) body_bytes = body . encode ( 'utf-8' ) # \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u043e\u0432 \u0438 \u0442\u0435\u043b\u0430 conn . sendall ( header_bytes + body_bytes ) def _render_grades_page ( self ) -> str : ''' \u0420\u0435\u043d\u0434\u0435\u0440\u0438\u0442 (\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u0442) HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u043e\u0446\u0435\u043d\u043a\u0430\u043c\u0438 ''' # \u0424\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 (\u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430 -- \u043e\u0446\u0435\u043d\u043a\u0430) rows = '' . join ( f '<tr><td> { discipline } </td><td> { grade } </td></tr>' for discipline , grade in self . grades . items ()) # \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b html = f \"\"\" <html> <head> <title>\u041e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c</title> </head> <body> <h1>\u041e\u0446\u0435\u043d\u043a\u0438 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432</h1> <table border=\"1\" cellpadding=\"5\" cellspacing=\"0\"> <tr> <th>\u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430</th> <th>\u041e\u0446\u0435\u043d\u043a\u0430</th> </tr> { rows } </table> </body> </html> \"\"\" return html if __name__ == '__main__' : host = 'localhost' port = 8080 name = 'Grader' serv = MyHTTPServer ( host , port , name ) try : serv . serve_forever () except KeyboardInterrupt : print ( '\u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d' )","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5 - CRUD HTTP-\u0441\u0435\u0440\u0432\u0435\u0440"},{"location":"labs/lab2/","text":"","title":"Lab 2"},{"location":"labs/lab3/","text":"","title":"Lab 3"},{"location":"labs/lab4/","text":"","title":"Lab 4"}]}